[{"id":0,"href":"/CO2025_Web/docs/lab/lab0/","title":"Lab0: Setup environment \u0026 Hello World","section":"Labs","content":" Lab0: Setup environment \u0026amp; Hello World # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":1,"href":"/CO2025_Web/docs/lab/lab1/","title":"Lab1: Assembly \u0026 Basic Design Flow","section":"Labs","content":" Lab1: Assembly \u0026amp; Basic Design Flow # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":2,"href":"/CO2025_Web/docs/lab/lab2/","title":"Lab2: Single Cycle CPU","section":"Labs","content":" Lab2: Single Cycle CPU # Introduction # In Lab2, you are tasked with implementing a Single Cycle CPU based on the RISC-V ISA. Upon completing this lab, you should have a deeper understanding of CPU architecture and the RISC-V instruction set.\nDon’t panic! This lab is not as difficult as it might seem. To successfully implement the RISC-V CPU, we encourage you to study the functionality of each component and understand how they cooperate. We will also introduce a useful RISC-V simulator, Ripes, which demonstrates the CPU workflow step by step.\nLab Source Code # The TAs have prepared a template for you. You can follow the template or modify it as needed. However, there are certain elements you should not change:\nRegisters Instruction Memory Data Memory CPU I/O interface and register instance names In the provided source code, we include a simple instruction file, TEST_INSTRUCTIONS.txt, containing machine code generated from TEST_INSTRUCTIONS.asm.\n⚠ Important\nThe rst signal is active low, which means the module will reset when the rst signal is set to zero. You should follow this design in your implementation.\nRipes # Ripes is a visual computer architecture simulator and assembly code editor designed for the RISC-V instruction set architecture.\nAs shown in the picture above, you can write your own assembly code, clock the processor, and verify the register values.\nYou can copy the generated machine code into TEST_INSTRUCTIONS.txt in the following format to run your code on your CPU design. Each line in the file should contain 8 bits. A single 4-byte instruction is represented by 4 lines, and the file should end with a new empty line.\naddi t2 zero 20 jalr ra (t2)0 addi t0 zero 1 addi t0 t0 1 addi t0 t0 1 addi t1 zero 100 00000001 01000000 00000011 10010011 00000000 00000011 10000000 11100111 00000000 00010000 00000010 10010011 00000000 00010010 10000010 10010011 00000000 00010010 10000010 10010011 00000110 01000000 00000011 00010011 ⚠ Important\nEnsure that you change the settings in Ripes to match the constraints of the register values specified for this lab. Single Cycle CPU # Architecture # You can follow the architecture diagram to implement a single-cycle CPU.\nInstruction # Implement the following instructions. The RV32I ISA layout is provided below.\nadd\naddi\nsub\nand\nandi\nor\nori\nslt\nslti\nlw\nsw\nbeq\nbne blt bge jal\njal stores pc+4 in regs[rd], executes pc = pc + imm \u0026lt;\u0026lt; 1 jalr\njalr stores pc+4 in regs[rd], exectues pc = regs[rs1] + imm ⚠ Important\nAll operations are signed. You must follow this ISA table to implement your instructions:\nRequirements # Implement your RISC-V single-cycle CPU. Your CPU should support the following RISC-V ISA instructions:\nArithmetic and Logical Operations: add, addi, sub, and, andi, or, ori, slt, slti Memory Operations: lw, sw Branch Operations: beq, bne, blt, bge Jump Operations: jal, jalr TAs have prepared a Verilator testbench and some TEST_INSTRUCTION.txt files to grade your design. The correctness will be verified by comparing the register values.\n⚠ Important\nDo not modify the register, instruction memory, or CPU interface, or you will receive 0 points.\nSubmission # Please submit your source code as a ZIP file to E3. The name of the ZIP file should be \u0026lt;student_id\u0026gt;.zip, and the structure should be as follows:\n\u0026lt;stduent_id\u0026gt;.zip |- \u0026lt;student_id\u0026gt;/ |- ...(your source codes) ⚠ Important\nThe deadline for submission is x/xx 23:59.\nHints # Read the textbook first to understand each submodule’s functionality. Use waveform debugging to simplify the debugging process. Try generating your own RISC-V machine code using Ripes. You can write simple assembly code to verify if your implementation works as expected. Reference # Computer Organization and Design RISC-V Edition, CH4 Ripes RISC-V Instruction Set Specifications "},{"id":3,"href":"/CO2025_Web/docs/lab/lab3/","title":"Lab3: Pipeline CPU","section":"Labs","content":" Lab3: Pipeline CPU # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":4,"href":"/CO2025_Web/docs/lab/lab4/","title":"Lab4: Pipeline CPU","section":"Labs","content":" Lab4: Pipeline CPU # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":5,"href":"/CO2025_Web/docs/lab/lab5/","title":"Lab5: Cache Simulator","section":"Labs","content":" Lab5: Cache Simulator # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":6,"href":"/CO2025_Web/docs/class/staff/","title":"Staff","section":"Class","content":" Staff # Instructor # Tsung Tai Yeh # Email: ttyeh@cs.nycu.edu.tw Location: EC Teaching Assistants # Kai-Chieh Hsu # Email: kaijhsu.cs12@nycu.edu.tw Location: EC619 Ting-Wei Chou # Email: userwei.cs12@nycu.edu.tw Location: "}]