[{"id":0,"href":"/CO2025_Web/docs/lab/lab0/","title":"Lab0: Setup environment \u0026 Hello World","section":"Labs","content":" Lab0: Setup environment \u0026amp; Hello World # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":1,"href":"/CO2025_Web/docs/lab/lab1/","title":"Lab1: Assembly \u0026 Basic Design Flow","section":"Labs","content":" Lab1: Assembly \u0026amp; Basic Design Flow # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":2,"href":"/CO2025_Web/docs/lab/lab2/","title":"Lab2: Single Cycle CPU","section":"Labs","content":" Lab2: Single Cycle CPU # Introduction # In Lab2, you are tasked with implementing a Single Cycle CPU based on the RISC-V ISA. Upon completing this lab, you should have a deeper understanding of CPU architecture and the RISC-V instruction set.\nDon’t panic! This lab is not as difficult as it might seem. To successfully implement the RISC-V CPU, we encourage you to study the functionality of each component and understand how they cooperate. We will also introduce a useful RISC-V simulator, Ripes, which demonstrates the CPU workflow step by step.\nLab Source Code # The TAs have prepared a template for you. You can follow the template or modify it as needed. However, there are certain elements you should not change:\nRegisters Instruction Memory Data Memory CPU I/O interface and register instance names In the provided source code, we include a simple instruction file, TEST_INSTRUCTIONS.txt, containing machine code generated from TEST_INSTRUCTIONS.asm.\n⚠ Important\nThe rst signal is active low, which means the module will reset when the rst signal is set to zero. You should follow this design in your implementation.\nRipes # Ripes is a visual computer architecture simulator and assembly code editor designed for the RISC-V instruction set architecture.\nAs shown in the picture above, you can write your own assembly code, clock the processor, and verify the register values.\nYou can copy the generated machine code into TEST_INSTRUCTIONS.txt in the following format to run your code on your CPU design. Each line in the file should contain 8 bits. A single 4-byte instruction is represented by 4 lines, and the file should end with a new empty line.\n00001010 00110000 00000100 00010011 11111111 11000001 00000001 00010011 00000000 10000001 00100000 00100011 00000000 00000000 00000100 00110011 ⚠ Important\nEnsure that you change the settings in Ripes to match the constraints of the register values specified for this lab. Reference # Ripes "},{"id":3,"href":"/CO2025_Web/docs/lab/lab3/","title":"Lab3: Pipeline CPU","section":"Labs","content":" Lab3: Pipeline CPU # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":4,"href":"/CO2025_Web/docs/lab/lab4/","title":"Lab4: Pipeline CPU","section":"Labs","content":" Lab4: Pipeline CPU # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":5,"href":"/CO2025_Web/docs/lab/lab5/","title":"Lab5: Cache Simulator","section":"Labs","content":" Lab5: Cache Simulator # Under Construction # This page is actively being developed. Please check back soon for updates and additional content.\n"},{"id":6,"href":"/CO2025_Web/docs/class/staff/","title":"Staff","section":"Class","content":" Staff # Instructor # Tsung Tai Yeh # Email: ttyeh@cs.nycu.edu.tw Location: EC Teaching Assistants # Kai-Chieh Hsu # Email: kaijhsu.cs12@nycu.edu.tw Location: EC619 Ting-Wei Chou # Email: userwei.cs12@nycu.edu.tw Location: "}]